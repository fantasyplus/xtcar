// Generated by gencpp from file mpc_msgs/VehicleStatus.msg
// DO NOT EDIT!


#ifndef MPC_MSGS_MESSAGE_VEHICLESTATUS_H
#define MPC_MSGS_MESSAGE_VEHICLESTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mpc_msgs
{
template <class ContainerAllocator>
struct VehicleStatus_
{
  typedef VehicleStatus_<ContainerAllocator> Type;

  VehicleStatus_()
    : car_mode(0)
    , error_level(0)
    , door_state(0)
    , lamp_L(0)
    , lamp_R(0)
    , voltage(0.0)
    , current(0.0)
    , steer(0.0)
    , hand_brake(0)
    , gear(0)
    , stop(0)
    , acc(0.0)
    , speed(0.0)  {
    }
  VehicleStatus_(const ContainerAllocator& _alloc)
    : car_mode(0)
    , error_level(0)
    , door_state(0)
    , lamp_L(0)
    , lamp_R(0)
    , voltage(0.0)
    , current(0.0)
    , steer(0.0)
    , hand_brake(0)
    , gear(0)
    , stop(0)
    , acc(0.0)
    , speed(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _car_mode_type;
  _car_mode_type car_mode;

   typedef uint8_t _error_level_type;
  _error_level_type error_level;

   typedef uint8_t _door_state_type;
  _door_state_type door_state;

   typedef uint8_t _lamp_L_type;
  _lamp_L_type lamp_L;

   typedef uint8_t _lamp_R_type;
  _lamp_R_type lamp_R;

   typedef float _voltage_type;
  _voltage_type voltage;

   typedef float _current_type;
  _current_type current;

   typedef float _steer_type;
  _steer_type steer;

   typedef uint8_t _hand_brake_type;
  _hand_brake_type hand_brake;

   typedef uint8_t _gear_type;
  _gear_type gear;

   typedef uint8_t _stop_type;
  _stop_type stop;

   typedef float _acc_type;
  _acc_type acc;

   typedef float _speed_type;
  _speed_type speed;





  typedef boost::shared_ptr< ::mpc_msgs::VehicleStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mpc_msgs::VehicleStatus_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleStatus_

typedef ::mpc_msgs::VehicleStatus_<std::allocator<void> > VehicleStatus;

typedef boost::shared_ptr< ::mpc_msgs::VehicleStatus > VehicleStatusPtr;
typedef boost::shared_ptr< ::mpc_msgs::VehicleStatus const> VehicleStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mpc_msgs::VehicleStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mpc_msgs::VehicleStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mpc_msgs::VehicleStatus_<ContainerAllocator1> & lhs, const ::mpc_msgs::VehicleStatus_<ContainerAllocator2> & rhs)
{
  return lhs.car_mode == rhs.car_mode &&
    lhs.error_level == rhs.error_level &&
    lhs.door_state == rhs.door_state &&
    lhs.lamp_L == rhs.lamp_L &&
    lhs.lamp_R == rhs.lamp_R &&
    lhs.voltage == rhs.voltage &&
    lhs.current == rhs.current &&
    lhs.steer == rhs.steer &&
    lhs.hand_brake == rhs.hand_brake &&
    lhs.gear == rhs.gear &&
    lhs.stop == rhs.stop &&
    lhs.acc == rhs.acc &&
    lhs.speed == rhs.speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mpc_msgs::VehicleStatus_<ContainerAllocator1> & lhs, const ::mpc_msgs::VehicleStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mpc_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mpc_msgs::VehicleStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mpc_msgs::VehicleStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mpc_msgs::VehicleStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mpc_msgs::VehicleStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mpc_msgs::VehicleStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mpc_msgs::VehicleStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mpc_msgs::VehicleStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b163f7630993eb80c9c2c58fe427804d";
  }

  static const char* value(const ::mpc_msgs::VehicleStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb163f7630993eb80ULL;
  static const uint64_t static_value2 = 0xc9c2c58fe427804dULL;
};

template<class ContainerAllocator>
struct DataType< ::mpc_msgs::VehicleStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mpc_msgs/VehicleStatus";
  }

  static const char* value(const ::mpc_msgs::VehicleStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mpc_msgs::VehicleStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 car_mode\n"
"uint8 error_level\n"
"uint8 door_state\n"
"uint8 lamp_L\n"
"uint8 lamp_R\n"
"float32 voltage\n"
"float32 current\n"
"float32 steer\n"
"uint8 hand_brake\n"
"uint8 gear\n"
"uint8 stop\n"
"float32 acc\n"
"float32 speed\n"
;
  }

  static const char* value(const ::mpc_msgs::VehicleStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mpc_msgs::VehicleStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.car_mode);
      stream.next(m.error_level);
      stream.next(m.door_state);
      stream.next(m.lamp_L);
      stream.next(m.lamp_R);
      stream.next(m.voltage);
      stream.next(m.current);
      stream.next(m.steer);
      stream.next(m.hand_brake);
      stream.next(m.gear);
      stream.next(m.stop);
      stream.next(m.acc);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mpc_msgs::VehicleStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mpc_msgs::VehicleStatus_<ContainerAllocator>& v)
  {
    s << indent << "car_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.car_mode);
    s << indent << "error_level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.error_level);
    s << indent << "door_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.door_state);
    s << indent << "lamp_L: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lamp_L);
    s << indent << "lamp_R: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lamp_R);
    s << indent << "voltage: ";
    Printer<float>::stream(s, indent + "  ", v.voltage);
    s << indent << "current: ";
    Printer<float>::stream(s, indent + "  ", v.current);
    s << indent << "steer: ";
    Printer<float>::stream(s, indent + "  ", v.steer);
    s << indent << "hand_brake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hand_brake);
    s << indent << "gear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gear);
    s << indent << "stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stop);
    s << indent << "acc: ";
    Printer<float>::stream(s, indent + "  ", v.acc);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MPC_MSGS_MESSAGE_VEHICLESTATUS_H
