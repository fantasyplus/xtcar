// Generated by gencpp from file mpc_msgs/Waypoint.msg
// DO NOT EDIT!


#ifndef MPC_MSGS_MESSAGE_WAYPOINT_H
#define MPC_MSGS_MESSAGE_WAYPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/TwistStamped.h>

namespace mpc_msgs
{
template <class ContainerAllocator>
struct Waypoint_
{
  typedef Waypoint_<ContainerAllocator> Type;

  Waypoint_()
    : gid(0)
    , lid(0)
    , pose()
    , twist()
    , change_flag(0)
    , lane_id(0)
    , left_lane_id(0)
    , right_lane_id(0)
    , stop_line_id(0)
    , cost(0.0)
    , time_cost(0.0)
    , direction(0)  {
    }
  Waypoint_(const ContainerAllocator& _alloc)
    : gid(0)
    , lid(0)
    , pose(_alloc)
    , twist(_alloc)
    , change_flag(0)
    , lane_id(0)
    , left_lane_id(0)
    , right_lane_id(0)
    , stop_line_id(0)
    , cost(0.0)
    , time_cost(0.0)
    , direction(0)  {
  (void)_alloc;
    }



   typedef int32_t _gid_type;
  _gid_type gid;

   typedef int32_t _lid_type;
  _lid_type lid;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::geometry_msgs::TwistStamped_<ContainerAllocator>  _twist_type;
  _twist_type twist;

   typedef int32_t _change_flag_type;
  _change_flag_type change_flag;

   typedef uint32_t _lane_id_type;
  _lane_id_type lane_id;

   typedef uint32_t _left_lane_id_type;
  _left_lane_id_type left_lane_id;

   typedef uint32_t _right_lane_id_type;
  _right_lane_id_type right_lane_id;

   typedef uint32_t _stop_line_id_type;
  _stop_line_id_type stop_line_id;

   typedef float _cost_type;
  _cost_type cost;

   typedef float _time_cost_type;
  _time_cost_type time_cost;

   typedef uint32_t _direction_type;
  _direction_type direction;





  typedef boost::shared_ptr< ::mpc_msgs::Waypoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mpc_msgs::Waypoint_<ContainerAllocator> const> ConstPtr;

}; // struct Waypoint_

typedef ::mpc_msgs::Waypoint_<std::allocator<void> > Waypoint;

typedef boost::shared_ptr< ::mpc_msgs::Waypoint > WaypointPtr;
typedef boost::shared_ptr< ::mpc_msgs::Waypoint const> WaypointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mpc_msgs::Waypoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mpc_msgs::Waypoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mpc_msgs::Waypoint_<ContainerAllocator1> & lhs, const ::mpc_msgs::Waypoint_<ContainerAllocator2> & rhs)
{
  return lhs.gid == rhs.gid &&
    lhs.lid == rhs.lid &&
    lhs.pose == rhs.pose &&
    lhs.twist == rhs.twist &&
    lhs.change_flag == rhs.change_flag &&
    lhs.lane_id == rhs.lane_id &&
    lhs.left_lane_id == rhs.left_lane_id &&
    lhs.right_lane_id == rhs.right_lane_id &&
    lhs.stop_line_id == rhs.stop_line_id &&
    lhs.cost == rhs.cost &&
    lhs.time_cost == rhs.time_cost &&
    lhs.direction == rhs.direction;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mpc_msgs::Waypoint_<ContainerAllocator1> & lhs, const ::mpc_msgs::Waypoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mpc_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mpc_msgs::Waypoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mpc_msgs::Waypoint_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mpc_msgs::Waypoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mpc_msgs::Waypoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mpc_msgs::Waypoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mpc_msgs::Waypoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mpc_msgs::Waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7548551657a1997f59a03c87ccbc5644";
  }

  static const char* value(const ::mpc_msgs::Waypoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7548551657a1997fULL;
  static const uint64_t static_value2 = 0x59a03c87ccbc5644ULL;
};

template<class ContainerAllocator>
struct DataType< ::mpc_msgs::Waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mpc_msgs/Waypoint";
  }

  static const char* value(const ::mpc_msgs::Waypoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mpc_msgs::Waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# global id\n"
"int32 gid \n"
"# local id\n"
"int32 lid\n"
"geometry_msgs/PoseStamped pose\n"
"geometry_msgs/TwistStamped twist\n"
"int32 change_flag\n"
"\n"
"uint32 lane_id\n"
"uint32 left_lane_id\n"
"uint32 right_lane_id\n"
"uint32 stop_line_id\n"
"float32 cost\n"
"float32 time_cost\n"
"\n"
"# Lane Direction\n"
"# FORWARD				= 0\n"
"# FORWARD_LEFT	 		= 1\n"
"# FORWARD_RIGHT			= 2\n"
"# BACKWARD				= 3 \n"
"# BACKWARD_LEFT			= 4\n"
"# BACKWARD_RIGHT		= 5\n"
"# STANDSTILL	 		= 6\n"
"uint32 direction\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/TwistStamped\n"
"# A twist with reference coordinate frame and timestamp\n"
"Header header\n"
"Twist twist\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::mpc_msgs::Waypoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mpc_msgs::Waypoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gid);
      stream.next(m.lid);
      stream.next(m.pose);
      stream.next(m.twist);
      stream.next(m.change_flag);
      stream.next(m.lane_id);
      stream.next(m.left_lane_id);
      stream.next(m.right_lane_id);
      stream.next(m.stop_line_id);
      stream.next(m.cost);
      stream.next(m.time_cost);
      stream.next(m.direction);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Waypoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mpc_msgs::Waypoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mpc_msgs::Waypoint_<ContainerAllocator>& v)
  {
    s << indent << "gid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gid);
    s << indent << "lid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lid);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "twist: ";
    s << std::endl;
    Printer< ::geometry_msgs::TwistStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.twist);
    s << indent << "change_flag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.change_flag);
    s << indent << "lane_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.lane_id);
    s << indent << "left_lane_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.left_lane_id);
    s << indent << "right_lane_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.right_lane_id);
    s << indent << "stop_line_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.stop_line_id);
    s << indent << "cost: ";
    Printer<float>::stream(s, indent + "  ", v.cost);
    s << indent << "time_cost: ";
    Printer<float>::stream(s, indent + "  ", v.time_cost);
    s << indent << "direction: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.direction);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MPC_MSGS_MESSAGE_WAYPOINT_H
