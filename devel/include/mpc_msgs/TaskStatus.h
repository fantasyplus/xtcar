// Generated by gencpp from file mpc_msgs/TaskStatus.msg
// DO NOT EDIT!


#ifndef MPC_MSGS_MESSAGE_TASKSTATUS_H
#define MPC_MSGS_MESSAGE_TASKSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mpc_msgs
{
template <class ContainerAllocator>
struct TaskStatus_
{
  typedef TaskStatus_<ContainerAllocator> Type;

  TaskStatus_()
    : task_end(0)
    , task_error(0)  {
    }
  TaskStatus_(const ContainerAllocator& _alloc)
    : task_end(0)
    , task_error(0)  {
  (void)_alloc;
    }



   typedef uint8_t _task_end_type;
  _task_end_type task_end;

   typedef uint8_t _task_error_type;
  _task_error_type task_error;





  typedef boost::shared_ptr< ::mpc_msgs::TaskStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mpc_msgs::TaskStatus_<ContainerAllocator> const> ConstPtr;

}; // struct TaskStatus_

typedef ::mpc_msgs::TaskStatus_<std::allocator<void> > TaskStatus;

typedef boost::shared_ptr< ::mpc_msgs::TaskStatus > TaskStatusPtr;
typedef boost::shared_ptr< ::mpc_msgs::TaskStatus const> TaskStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mpc_msgs::TaskStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mpc_msgs::TaskStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mpc_msgs::TaskStatus_<ContainerAllocator1> & lhs, const ::mpc_msgs::TaskStatus_<ContainerAllocator2> & rhs)
{
  return lhs.task_end == rhs.task_end &&
    lhs.task_error == rhs.task_error;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mpc_msgs::TaskStatus_<ContainerAllocator1> & lhs, const ::mpc_msgs::TaskStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mpc_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mpc_msgs::TaskStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mpc_msgs::TaskStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mpc_msgs::TaskStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mpc_msgs::TaskStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mpc_msgs::TaskStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mpc_msgs::TaskStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mpc_msgs::TaskStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "713ed9c21811428b0f7a78688cdf9573";
  }

  static const char* value(const ::mpc_msgs::TaskStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x713ed9c21811428bULL;
  static const uint64_t static_value2 = 0x0f7a78688cdf9573ULL;
};

template<class ContainerAllocator>
struct DataType< ::mpc_msgs::TaskStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mpc_msgs/TaskStatus";
  }

  static const char* value(const ::mpc_msgs::TaskStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mpc_msgs::TaskStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 task_end\n"
"uint8 task_error\n"
;
  }

  static const char* value(const ::mpc_msgs::TaskStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mpc_msgs::TaskStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.task_end);
      stream.next(m.task_error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TaskStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mpc_msgs::TaskStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mpc_msgs::TaskStatus_<ContainerAllocator>& v)
  {
    s << indent << "task_end: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.task_end);
    s << indent << "task_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.task_error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MPC_MSGS_MESSAGE_TASKSTATUS_H
